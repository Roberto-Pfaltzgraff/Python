# Desafio do BootCamp DIO & NTT Data Engenharia de Dados com Python (Desafio 3 - Fun√ß√µes, Usu√°rios e Contas)
# Objetivo: 
#     Alterar o sistema banc√°rio criado anteriormente nos desafio para implementar novas funcionalidades.
#     Usar fun√ß√µes, criar opera√ß√£o de cadastro de usu√°rio e de conta.
#      1) Transformar as codifica√ß√µes das opera√ß√µes em fun√ß√µes ‚úÖüÜó(J√° implementado desta forma na etapa 1)
#         - Cada opera√ß√£o precisa ser codificada como fun√ß√£o.‚úÖ(J√° tinha feito desta forma)
#         - A os argumentos das fun√ß√µes deve seguir a seguinte ordem:
#             - Fun√ß√£o da opera√ß√£o **Saque** deve conter os argumentos apenas por nome (keyword only).
#             - Fun√ß√£o da opera√ß√£o **Dep√≥sito** deve conter os argumentos apenas por posi√ß√£o (positional only).
#             - Fun√ß√£o da opera√ß√£o **Extrato** deve conter os argumentos por posi√ß√£o e nome (positional only e keyword only). Sendo o argumento _saldo_ por posi√ß√£o e o argumento _extrato_ por nome.
#      2) Criar a fun√ß√£o de Cadastrar Usu√°rio (Cliente do banco)
#         - O sistema deve armazenar os usu√°rios em uma lista.
#         - Um usu√°rio √© composto por: nome, data nascimento, cpf e endere√ßo.
#         - O endere√ßo √© uma string com o formato: logradouro, n√∫mero - bairro - cidade - sigla do estado.
#         - CPF deve conter apenas n√∫meros.
#         - N√£o pode haver mais de 1 usu√°rio com o mesmo CPF.
#      3) Criar a fun√ß√£o de Cadastrar Conta Banc√°ria (vincular com o Usu√°rio/Cliente)
#         - O sistema deve armazenar as contas em uma lista.
#         - Uma conta √© composta por: ag√™ncia, n√∫mero da conta e usu√°rio.
#         - O n√∫mero da conta √© um sequencial, iniciado em 1.
#         - O n√∫mero da ag√™ncia √© fixo: "0001"
#         - O usu√°rio pode ter mais de uma conta, mas uma conta pertence a somente um usu√°rio. 
#     O intuito √© aplicar tudo que foi aprendido at√© essa etapa.
# Ponto de Partida (C√≥digo que fiz no 2¬∫ Desafio):
#     https://github.com/Roberto-Pfaltzgraff/estudos_prg-Python/blob/main/DIO/NTT_EngDados/Desafios/DIO_NTT_EngDados_DESAFIO_02_criando_sistema_bancario_vData_Minha.py
#     https://github.com/Roberto-Pfaltzgraff/estudos_prg-Python/blob/main/DIO/NTT_EngDados/Desafios/aREADME_Desafio_02_criando_sistema_bancario_vData.md

# *** M√≥dulos necess√°rios ***
from datetime import datetime, date, time, timedelta # Por enquanto sem necessidade: , timezone

# *** Declara√ß√£o de constates ***
C_MENU = """

*************** MENU ***************

[1] Depositar
[2] Sacar
[3] Extrato
[4] Cadastrar Usu√°rio/Cliente
[5] Criar Conta Corrente
[0] Sair

Digite o n√∫mero correspondente a op√ß√£o desejada: """
C_QTD_MAX_SAQUES_DIA = 3 # Limite de realiza√ß√£o de saque por dia
C_VALOR_MAX_POR_SAQUE = 500.00 # Limite m√°ximo por saque
C_LIMITE_TRANSACOES_DIARIA = 10 # Quantidade m√°xima de transa√ß√µes por dia
C_NUM_SEGUNDOS_TEMPORIZADOR = 2 # Tempo em segundos da mensagem com temporizador

# *** Declara√ß√£o de vari√°veis ***
v_opcao_menu = "0"
v_saldo = 0 # Futuramente Recuperar o Saldo por fun√ß√£o.
v_extrato = "" # Para exibi√ß√£o do extrato e atualiza√ß√£o das opera√ßoes de dep√≥sito e saque
v_qtd_saque_hoje = 0  # Controlar qtd de saques no dia # Futuramente controlar melhor por fun√ß√£o.
v_clientes = [] # Lista de Clientes / Usu√°rios cadastrados (OBS: Lista cujo elementos s√£o estruturas de dicion√°rios)
v_contas = [] # Lista de Contas Banc√°rias cadastradas (OBS: Lista cujo elementos s√£o estruturas de dicion√°rios)

# *** Declara√ß√£o de fun√ß√µes ***
def fc_operacao_depositar(p_saldo, p_extrato, /):
    # Fun√ß√£o respons√°vel pela Opera√ß√£o Depositar
    # Regras: - Deve ser poss√≠vel depositar valores positivos para minha conta banc√°ria.
    #         - A vers√£o v1 do projeto trabalha apenas com 1 usu√°rio, dessa forma n√£o precisamos nos
    #           preocupar em identificar qual √© o n√∫mero da ag√™ncia e conta banc√°ria.
    #         - Todos os dep√≥sitos devem ser armazenados em uma vari√°vel e exibidos na opera√ß√£o extrato.
    # Parametros: Ser√£o recebidos argumentos apenas por posi√ß√£o e atualiza√ß√£o de valores no retorno.
    print("Deposito")
    while True:
        # Funcionalidade 1 e 2: Tratamento limite di√°rio de transa√ß√µes e mensagem
        if fc_excedeu_limite_transacoes_hoje(p_extrato_atual=p_extrato):
            fc_mensagem_temporizada("\n\nO limite de transa√ß√µes di√°ria foi atingindo.\nEssa opera√ß√£o est√° sendo cancelada.\n<<<Retornando ao Menu!>>>", C_NUM_SEGUNDOS_TEMPORIZADOR)
            break
        # Ler valor a depositar
        v_valor_deposito = fc_ler_valor_monetario("Digite um valor positivo para o DEP√ìSITO ou 0 (zero) p/ cancelar a opera√ß√£o e retornar ao menu.\nDigite o valor do dep√≥sito: R$ ")
        if v_valor_deposito < 0:
            print("ATEN√á√ÉO! N√£o √© poss√≠vel fazer dep√≥sito com valor NEGATIVO!")
            continue
        elif v_valor_deposito == 0:
            fc_mensagem_temporizada("\n\nOpera√ß√£o de dep√≥sito cancelada. Retornando ao Menu!", C_NUM_SEGUNDOS_TEMPORIZADOR)
            break
        else:
            p_saldo += v_valor_deposito
            # Funcionalidade 3: Inser√ß√£o da Data e Hora no Extrato & Melhoria
            v_inicio_extrato = "" if not p_extrato else "\n"
            v_str_data_hora = fc_str_data_hora_atual(p_so_data=False)
            p_extrato += f"{v_inicio_extrato}Data hora: {v_str_data_hora} | Opera√ß√£o: Dep√≥sito (+) = R$ {v_valor_deposito:.2f}"
            fc_mensagem_temporizada(p_mensagem=f"O valor de R$ {v_valor_deposito:.2f} foi depositado com sucesso!\nSeu saldo √© de R$ {p_saldo:.2f}!", p_tempo_em_segundos=C_NUM_SEGUNDOS_TEMPORIZADOR)
        break
    return p_saldo, p_extrato

def fc_operacao_sacar(*, p_saldo, p_extrato, p_qtd_saques_do_dia):
    # Fun√ß√£o respons√°vel pela Opera√ß√£o de Saque
    # Regras: - O sistema deve permitir realizar 3 saques di√°rios com limite m√°ximo de R$500,00 por saque.
    #         - Caso o usu√°rio n√£o tenha saldo em conta, o sistema deve exibir uma mensagem informando
    #           que n√£o ser√° poss√≠vel sacar o dinheiro por falta de saldo.
    #         - Todos os saques devem ser armazenados em uma vari√°vel e exibidos na opera√ß√£o extrato.
    # Parametros: Ser√£o recebidos apenas por nome e atualiza√ß√£o de valores no retorno.
    print("Saque")
    if p_qtd_saques_do_dia >= 3:
        fc_mensagem_temporizada("\n\nVoc√™ alcan√ßou o limite di√°rio de 3 saques!\nLogo, n√£o poder√° prosseguir com a opera√ß√£o de saque.", C_NUM_SEGUNDOS_TEMPORIZADOR)
        return p_saldo, p_extrato, p_qtd_saques_do_dia
    while True:
        # Funcionalidade 1 e 2: Tratamento limite di√°rio de transa√ß√µes e mensagem
        if fc_excedeu_limite_transacoes_hoje(p_extrato_atual=p_extrato):
            fc_mensagem_temporizada("\n\nO limite de transa√ß√µes di√°ria foi atingindo.\nEssa opera√ß√£o est√° sendo cancelada.\n<<<Retornando ao Menu!>>>", C_NUM_SEGUNDOS_TEMPORIZADOR)
            break
        # Ler valor a sacar
        v_valor_saque = fc_ler_valor_monetario("Digite um valor positivo para o SAQUE ou 0 (zero) p/ cancelar a opera√ß√£o e retornar ao menu.\nDigite o valor do saque: R$ ")
        if v_valor_saque < 0: # Futuramente: Passar esse tratamento e do deposito para fc_ler_valor_monetario
            print("ATEN√á√ÉO! N√£o √© poss√≠vel fazer saque com valor NEGATIVO!")
            continue
        elif v_valor_saque == 0:
            fc_mensagem_temporizada("\n\nOpera√ß√£o de saque cancelada. Retornando ao Menu!", C_NUM_SEGUNDOS_TEMPORIZADOR)
            break
        elif v_valor_saque > C_VALOR_MAX_POR_SAQUE:
            fc_mensagem_temporizada(f"\n\nO valor m√°ximo por saque √© de R$ {C_VALOR_MAX_POR_SAQUE:.2f}.\nInforme um novo valor dentro do limite!", C_NUM_SEGUNDOS_TEMPORIZADOR)
            continue
        elif v_valor_saque > p_saldo:
            fc_mensagem_temporizada(f"\n\nO valor informado p/ saque de R$ {v_valor_saque:.2f} √© maior que seu saldo de R$ {p_saldo:.2f}.\nN√£o √© poss√≠vel prosseguir com o saque por falta de saldo.\nInforme um novo valor de saque dentro do seu saldo!", C_NUM_SEGUNDOS_TEMPORIZADOR)
            continue
        else:
            p_qtd_saques_do_dia += 1
            p_saldo -= v_valor_saque
            # Funcionalidade 3: Inser√ß√£o da Data e Hora no Extrato & Melhoria
            v_inicio_extrato = "" if not p_extrato else "\n"
            v_str_data_hora = fc_str_data_hora_atual(p_so_data=False)
            p_extrato += f"{v_inicio_extrato}Data hora: {v_str_data_hora} | Opera√ß√£o: Saque    (-) = R$ {v_valor_saque:.2f}"
            fc_mensagem_temporizada(p_mensagem=f"O valor de R$ {v_valor_saque:.2f} foi sacado com sucesso!\nSeu saldo atual √© de R$ {p_saldo:.2f}!", p_tempo_em_segundos=C_NUM_SEGUNDOS_TEMPORIZADOR)
        break
    return p_saldo, p_extrato, p_qtd_saques_do_dia

def fc_operacao_extrato(p_saldo, /, *, p_extrato):
    # Fun√ß√£o respons√°vel pela Opera√ß√£o de Extrato
    # Regras: - Essa opera√ß√£o deve listar todos os dep√≥sitos e saques realizados na conta.
    #         - Os valores devem ser exibidos utilizando o formato R$ xxx.xx.
    #           Exemplo: 1500.45 ‚áí deve ser apresentado = R$ 1500.45.
    #         - No fim da listagem deve ser exibido o saldo atual da conta.
    # Parametros: Ser√£o recebidos o argumento saldo por posi√ß√£o e o argumento extrato por nome
    #             e a atualiza√ß√£o de valores no retorno.
    C_QTD_CARACTERES_EXTRATO = 70
    print("Extrato\n\n")
    print("Extrato Banc√°rio".center(C_QTD_CARACTERES_EXTRATO, "="))  # Cabe√ßalho
    print("Sua conta banc√°ria n√£o possui movimenta√ß√µes!" if not p_extrato else p_extrato) # Conte√∫do da movimenta√ß√£o
    print("".center(C_QTD_CARACTERES_EXTRATO, "-"))  # Separador
    print(f"Seu Saldo atual √© de R$ {p_saldo:.2f}.") # Exibindo Saldo
    fc_mensagem_temporizada("".center(C_QTD_CARACTERES_EXTRATO, "="), C_NUM_SEGUNDOS_TEMPORIZADOR)  # Rodap√©

def fc_operacao_cadastra_cliente(p_lst_clientes):
    # Fun√ß√£o respons√°vel pelo Cadastro de Usu√°rio/Cliente.
    # Regras/Funcionalidade:
    #    - Ler os dados de Cliente: CPF, Nome, Data Nascimento e Endere√ßo
    #    - CPF ser√° apenas n√∫meros e n√£o pode haver mais de um cadastrado na lista de Clientes
    #  Par√¢metros: 
    #     - p_lst_clientes => Recebe a lista de Clientes cadastrados.
    #  Retorno: Ser√° retornado a estrutura de dados do Cliente {CPF, Nome, Data Nascimento e Endere√ßo}
    #           onde a funcionalidade chamadora ir√° integr√°-la a respectiva lista de Clientes
    print("Cadastro Usu√°rio/Cliente\n\n")
    while True:
        # Leitura e tratamento do CPF
        v_str_cpf = input("Digite o CPF do novo cliente (apenas digito): ")
        if not v_str_cpf.isdigit():
            print(f"ATEN√á√ÉO! O valor digitado para CPF deve conter apenas digitos: {list(range(10))}!")
            continue
        else:
            # Futuramente implementar possibilidade de sair sem cadastrar e retornar ao menu
            v_cpf = int(v_str_cpf)
            
        # Verificar se esse CPF consta na lista de Clientes
        if [cliente.get("cpf") for cliente in p_lst_clientes if cliente.get("cpf") == v_cpf]:
            print("CPF informado j√° foi cadastrado! N√£o pode haver mais de um usu√°rio com mesmo CPF. Informe um novo!")
            continue
        break
    v_nome = input("Digite o Nome: ")
    v_data_nascimento = input("Digite o Data de Nascimento (DD/MM/YYYY): ") # Futuramente implementar critica de valida√ß√£o e formata√ß√£o
    v_endereco = input("Digite o Endere√ßo (Logradouro, n√∫mero - Bairro - Cidade - UF): ") # String sem tratamento, apenas indicando formato
    # Montar estrutura de dados de retorno para ser inserida na lista de Clientes
    v_novo_cliente = {"cpf": v_cpf, "nome": v_nome, "data_nascimento": v_data_nascimento, "endereco": v_endereco}
    return v_novo_cliente

def fc_operacao_criar_conta(p_lst_clientes, p_gerador_sequence):
    # Fun√ß√£o respons√°vel por Criar Conta Corrente Banc√°ria.
    # Regras/Funcionalidade:
    #    - A Conta banc√°ria √© composta de: Ag√™ncia, Conta e CPF (representando o Cliente/Usu√°rio)
    #    - O n√∫mero da Ag√™ncia √© fixo: "0001"
    #    - O n√∫mero da Conta banc√°ria √© um seq√™ncial
    #    - O usu√°rio pode ter mais de uma conta, mas uma conta pertence a somente um usu√°rio.
    #  Par√¢metros: 
    #     - p_lst_clientes => Recebe a lista de Clientes cadastrados.
    #  Retorno: Ser√° retornado a estrutura de dados da Conta {Agencia, Conta, CPF}
    #           onde a funcionalidade chamadora ir√° integr√°-la a respectiva lista de Contas
    C_NUMERO_AGENCIA = "0001"
    print("Criar Conta Banc√°ria\n\n")
    # Obter e validar CPF
    # Esse pr√≥ximo trecho ir√° virar fun√ß√£o p/ modularizar, mas n√£o agora pois estou com foco no aprendizando das estruturas
    while True:
        # Leitura e tratamento do CPF
        v_str_cpf = input("Digite o CPF do Cliente para Nova Conta banc√°ria (apenas digito): ")
        if not v_str_cpf.isdigit():
            print(f"ATEN√á√ÉO! O valor digitado para CPF deve conter apenas digitos: {list(range(10))}!")
            continue
        else:
            # Futuramente implementar possibilidade de sair sem cadastrar e retornar ao menu
            v_cpf = int(v_str_cpf)
            
        # Confirmar se esse CPF consta na lista de Clientes
        if not [cliente.get("cpf") for cliente in p_lst_clientes if cliente.get("cpf") == v_cpf]:
            print("CPF informado n√£o foi cadastrado! Para criar a Conta Banc√°ria √© necess√°rio que o Cliente esteja cadastrado com seu CPF. Informe um existente!")
            continue
        break
    # Obtendo o n√∫mero da conta banc√°ria a ser criada
    v_numero_conta = next(p_gerador_sequence)
    # Montar estrutura de dados de retorno para ser inserida na lista de Contas
    v_nova_conta = {"agencia": C_NUMERO_AGENCIA, "conta": v_numero_conta, "cpf": v_cpf}
    return v_nova_conta

def fc_mensagem_temporizada(p_mensagem, p_tempo_em_segundos):
    # Fun√ß√£o que apresenta a mensagem do par√¢metro p_mensagem e realiza uma espera
    # aproximada de segundos definida no par√¢metro p_tempo_em_segundos para prosseguir com o processamento.
    # Permitindo que o usu√°rio leia a mensagem, antes de reapresentar novas mensagens.
    # Provavelmente h√° fun√ß√µes pr√≥prias para isso, mas ser√° vista em m√≥dulos seguintes
    QTD_EQUIVALENTE_1SEGUNDO = 89000000 # Aproximadamente com testes feitos na maquina local
    qtd_repeticao_total = QTD_EQUIVALENTE_1SEGUNDO * p_tempo_em_segundos
    print(p_mensagem)
    # La√ßo para realizar uma espera com um temporizador de aproximadamente a quantidade de segundos desejada.
    for temporizador in range(qtd_repeticao_total):
        pass # N√£o faz nada.

def fc_ler_valor_monetario(p_mensagem):
    # Fun√ß√£o ir√° apresentar uma mensagem antes leitura, conforme par√¢metro
    # ap√≥s digita√ß√£o do usu√°rio, ir√° validar a digita√ß√£o para garantir
    # que a entrada seja um n√∫mero monet√°rio
    while True:
        str_valor = input(p_mensagem)
        if not str_valor.replace(".", "", 1).isdigit():
            print("ATEN√á√ÉO! O valor digitado deve ser num√©rico.\n      N√£o pode conter letras e outros caracteres. Apenas digitos e um ponto decimal!")
            continue
        else:
            break
    return float(f"{float(str_valor):.2f}")

def fc_str_data_hora_atual(p_so_data=False):
    # Fun√ßao que retorna uma string com a atual Data e Hora ou apenas a Data formatada.
    # O formato seguir√° respectivamente o padr√£o: "DD/MM/YYYY HH:MM" ou "DD/MM/YYYY".
    # Se o par√¢metro p_so_data for:
    #         True => Retornar√° apenas a Data.
    #         False => Retornar√° a Data e Hora.
    return datetime.now().strftime("%d/%m/%Y") if p_so_data else datetime.now().strftime("%d/%m/%Y %H:%M")

def fc_qtd_transacoes_hoje(p_str_extrato):
    # Fun√ß√£o que retorna a quantidade de transa√ß√µes no extrato realizada na data de hoje.
    # Par√™mtro p_str_extrato ir√° receber a string com as movimenta√ß√µes do extrato.
    return p_str_extrato.count(fc_str_data_hora_atual(p_so_data=True))

def fc_excedeu_limite_transacoes_hoje(p_extrato_atual):
    # Fun√ß√£o que ir√° verificar se a quantidade de transa√ß√µes excedeu o limite estabelecido.
    # Caso positivo, retorna True, sen√£o False.
    return fc_qtd_transacoes_hoje(p_extrato_atual) >= C_LIMITE_TRANSACOES_DIARIA

def fc_sequence_conta():
    # Fun√ß√£o similar a uma sequence de banco para gerar o n√∫mero sequencial
    # da conta banc√°ria, come√ßando em 1.
    v_sequencia = 0
    while True:
        v_sequencia += 1
        yield v_sequencia

# *** Programa Principal ***
v_gerador_sequence = fc_sequence_conta()
while True:
    # La√ßo de intera√ß√£o do Menu
    v_opcao_menu = input(C_MENU)

    if v_opcao_menu == "0":
        print("Obrigado por ser nosso cliente e utilizar nossos servi√ßos!")
        break

    elif v_opcao_menu == "1":
        # Argumentos da Opera√ß√£o Dep√≥sito: p_saldo e p_extrato por posi√ß√£o apenas (Desafio 3)
        v_saldo, v_extrato = fc_operacao_depositar(v_saldo, v_extrato)
    
    elif v_opcao_menu == "2":
        # Argumentos da Opera√ß√£o Saque: p_saldo, p_extrato e p_qtd_saques_do_dia por nome apenas (Desafio 3)
        v_saldo, v_extrato, v_qtd_saque_hoje = fc_operacao_sacar(p_saldo=v_saldo, p_extrato=v_extrato, p_qtd_saques_do_dia=v_qtd_saque_hoje)
    
    elif v_opcao_menu == "3":
        # Argumentos da Opera√ß√£o Extrato: p_saldo por posi√ß√£o apenas e p_extrato por nome apenas (Desafio 3)
        fc_operacao_extrato(v_saldo, p_extrato=v_extrato)
    
    elif v_opcao_menu == "4":
        v_clientes.append(fc_operacao_cadastra_cliente(p_lst_clientes=v_clientes))
        # Visualizar Clientes/Usu√°rios cadastrados. Solu√ß√£o tempor√°ria apenas para testes. Futuramente implementar funcionalidade no menu.
        fc_mensagem_temporizada(f"\n\nVisualiza√ß√£o clientes cadastrados (TEMPOR√ÅRIO)!\n{v_clientes}\n\n", p_tempo_em_segundos=C_NUM_SEGUNDOS_TEMPORIZADOR)

    elif v_opcao_menu == "5":
        v_contas.append(fc_operacao_criar_conta(p_lst_clientes=v_clientes, p_gerador_sequence=v_gerador_sequence))
        # Visualizar Contas cadastradas. Solu√ß√£o tempor√°ria apenas para testes. Futuramente implementar funcionalidade no menu.
        fc_mensagem_temporizada(f"\n\nVisualiza√ß√£o contas cadastradas (TEMPOR√ÅRIO)!\n{v_contas}\n\n", p_tempo_em_segundos=C_NUM_SEGUNDOS_TEMPORIZADOR)

    else:
        fc_mensagem_temporizada(p_mensagem="Op√ß√£o inv√°lida!\nFavor escolher uma das op√ß√µes num√©ricas apresentada no menu.",
                                p_tempo_em_segundos=C_NUM_SEGUNDOS_TEMPORIZADOR)
        continue
        print("Op√ß√£o inv√°lida!\nFavor escolher uma das op√ß√µes num√©ricas apresentada no menu.")
